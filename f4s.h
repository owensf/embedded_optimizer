#include <stdio.h>
#include <string.h>

#define NUM_BRACKETS 13
#define NUM_ELEMENTS_BRACKET 7
#define NUM_TEAMS 64
#define NUM_TEAMS_REGION 16
#define NUM_ROUNDS 6
#define UNPICKED_SOUTH 65
#define UNPICKED_EAST 66
#define UNPICKED_MIDWEST 67
#define UNPICKED_WEST 68
#define MINIMUM_TEAM_PROB 0.1
#define NUM_TEAMS_S16 31

#define CHAMP_INDEX 5
#define RU_INDEX 4
#define F4_INDEX 3
#define E8_INDEX 2
#define S16_INDEX 1
#define R32_INDEX 0

#define MAX_SOUTH 16
#define MAX_EAST 32
#define MAX_MIDWEST 48
#define MAX_WEST 64


static const uint16_t global_f4s_list[NUM_BRACKETS][NUM_ELEMENTS_BRACKET] =
					{{33, 33, 1, 55, 33, 21, 1},
					{33, 33, 17, 55, 33, 17, 1},
					{17, 33, 17, 55, 33, 17, 15},
					{33, 33, 17, 59, 33, 17, 9},
					{33, 33, 17, 59, 33, 17, 1},
					{17, 49, 17, 49, 47, 17, 15},
					{1, 47, 1, 59, 47, 27, 1},
					{1, 43, 1, 59, 43, 23, 1},
					{1, 63, 1, 63, 33, 31, 1},
					{63, 63, 17, 63, 47, 17, 1},
					{63, 63, 23, 63, 33, 23, 1},
					{49, 49, 31, 49, 47, 31, 1},
					{49, 49, 15, 49, 33, 17, 15}};


static const float probs[NUM_TEAMS][NUM_ROUNDS] = {
{ 0.985786649 , 0.81932799 , 0.654064523 , 0.452827125 , 0.30487252 , 0.161726457  },
{ 0.014213351 , 0.001363469 , 0.000177692 , 1.76e-05 , 2.69e-06 , 3.14e-07  },
{ 0.508126528 , 0.092010738 , 0.055011425 , 0.026282105 , 0.011809736 , 0.003990813  },
{ 0.491873472 , 0.087297803 , 0.052340705 , 0.025089199 , 0.011078882 , 0.003677024  },
{ 0.669242707 , 0.385298635 , 0.102093872 , 0.046230055 , 0.022751934 , 0.008457174  },
{ 0.330757293 , 0.145341635 , 0.023804891 , 0.007526862 , 0.00240677 , 0.000577742 },
{ 0.721410838 , 0.375305749 , 0.098587428 , 0.044370374 , 0.019299157 , 0.006306426  },
{ 0.278589162 , 0.094053981 , 0.013919464 , 0.004060339 , 0.001157408 , 0.000248236  },
{ 0.785335862 , 0.457925503 , 0.260874761 , 0.110841792 , 0.060186493 , 0.024875459  },
{ 0.214664138 , 0.073063974 , 0.02958466 , 0.008667541 , 0.003287805 , 0.00093511  },
{ 0.889010974 , 0.451153926 , 0.241321565 , 0.095414591 , 0.056141737 , 0.025383875  },
{ 0.110989026 , 0.017856597 , 0.003037756 , 0.00037489 , 7.96e-05 , 1.28e-05  },
{ 0.359265361 , 0.09164939 , 0.033308577 , 0.009685884 , 0.003949905 , 0.00120851  },
{ 0.640734639 , 0.220408522 , 0.078826166 , 0.022567951 , 0.009453757 , 0.002972573  },
{ 0.935394107 , 0.674503558 , 0.350618916 , 0.145682001 , 0.083558196 , 0.036703225  },
{ 0.064605893 , 0.013438531 , 0.002427598 , 0.000361674 , 7.55e-05 , 1.2e-05  },
{ 0.98329316 , 0.693803982 , 0.406725654 , 0.253038024 , 0.11974324 , 0.05293929  },
{ 0.01670684 , 0.00098689 , 7.85e-05 , 8.22e-06 , 3.88e-07 , 1.97e-08 },
{ 0.641222075 , 0.216869979 , 0.099661924 , 0.050661219 , 0.019752164 , 0.007306046  },
{ 0.358777925 , 0.088339149 , 0.033996939 , 0.014898816 , 0.004997026 , 0.001611072  },
{ 0.819032266 , 0.457112286 , 0.226807138 , 0.132213313 , 0.054093535 , 0.020911284  },
{ 0.180967734 , 0.051100857 , 0.01176036 , 0.003749913 , 0.001028507 , 0.00027601  },
{ 0.867605166 , 0.46447596 , 0.216558932 , 0.120461533 , 0.050092156 , 0.019655047  },
{ 0.132394834 , 0.027310897 , 0.004410594 , 0.00104226 , 0.000234348 , 5.24e-05  },
{ 0.664488072 , 0.446210806 , 0.232082894 , 0.103488249 , 0.0403046 , 0.01489318  },
{ 0.335511928 , 0.183708838 , 0.087291372 , 0.035436429 , 0.010110836 , 0.002812972  },
{ 0.851407907 , 0.349000831 , 0.148982154 , 0.054220715 , 0.01965016 , 0.00679898  },
{ 0.148592093 , 0.021079525 , 0.003616481 , 0.000536806 , 8.34e-05 , 1.32e-05  },
{ 0.637027038 , 0.269577385 , 0.129958942 , 0.049989247 , 0.016475147 , 0.005227568  },
{ 0.362972962 , 0.118288891 , 0.048212049 , 0.015546101 , 0.00515164 , 0.001642771  },
{ 0.889203263 , 0.584277017 , 0.342156839 , 0.16303435 , 0.067903797 , 0.02668303  },
{ 0.110796737 , 0.027856708 , 0.007699268 , 0.001674804 , 0.000266962 , 4.34e-05  },
{ 0.971047547 , 0.741489232 , 0.588248324 , 0.407246851 , 0.309131289 , 0.221185763  },
{ 0.028952453 , 0.003638409 , 0.000675058 , 0.000101036 , 1.46e-05 , 2.21e-06  },
{ 0.419077203 , 0.095680581 , 0.057980839 , 0.028767929 , 0.012407938 , 0.005121342  },
{ 0.580922797 , 0.159191778 , 0.089796666 , 0.041114016 , 0.018581055 , 0.00800653  },
{ 0.594447596 , 0.264267455 , 0.061067412 , 0.023816258 , 0.009488811 , 0.00364175  },
{ 0.405552404 , 0.151522138 , 0.035333421 , 0.01387406 , 0.004622701 , 0.001507242  },
{ 0.737316538 , 0.470208014 , 0.14871807 , 0.07279253 , 0.032620975 , 0.013947104  },
{ 0.262683462 , 0.114002394 , 0.01818021 , 0.005311885 , 0.001465241 , 0.000402206  },
{ 0.640039356 , 0.341255658 , 0.142147735 , 0.053545509 , 0.022097789 , 0.008758766  },
{ 0.359960644 , 0.153173539 , 0.038033755 , 0.008858308 , 0.002613644 , 0.000762864  },
{ 0.874221896 , 0.48089457 , 0.170352724 , 0.055164161 , 0.021533158 , 0.008111128  },
{ 0.125778104 , 0.024676233 , 0.002677842 , 0.000285754 , 4.44e-05 , 7.18e-06  },
{ 0.60401245 , 0.21929161 , 0.126905114 , 0.046840074 , 0.024588281 , 0.012181632  },
{ 0.39598755 , 0.116699701 , 0.056973259 , 0.017045891 , 0.006300934 , 0.002258272  },
{ 0.921391659 , 0.646431553 , 0.458320103 , 0.224545506 , 0.141317044 , 0.083376089  },
{ 0.078608341 , 0.017577136 , 0.004589469 , 0.000690233 , 0.000137265 , 2.79e-05  },
{ 0.978208685 , 0.656920532 , 0.389980839 , 0.202425028 , 0.091173643 , 0.049506039  },
{ 0.021791315 , 0.001381552 , 9.69e-05 , 5.97e-06 , 3.89e-07 , 3.66e-08  },
{ 0.515279284 , 0.178697793 , 0.085600101 , 0.035465887 , 0.013545669 , 0.006415741  },
{ 0.484720716 , 0.163000123 , 0.072760621 , 0.028047574 , 0.009726315 , 0.004245783  },
{ 0.585061934 , 0.180580515 , 0.092029519 , 0.045208115 , 0.015539635 , 0.006732729  },
{ 0.414938066 , 0.106666754 , 0.029900908 , 0.008531215 , 0.002286415 , 0.000798684  },
{ 0.846392029 , 0.645402201 , 0.314987954 , 0.148665522 , 0.061167833 , 0.030827824  },
{ 0.153607971 , 0.06735053 , 0.014643123 , 0.003315109 , 0.000709608 , 0.000202994  },
{ 0.625388191 , 0.242129179 , 0.108827993 , 0.048888839 , 0.019532792 , 0.009606693  },
{ 0.374611809 , 0.113154932 , 0.046806824 , 0.019469179 , 0.005384124 , 0.001933206  },
{ 0.916324146 , 0.626239816 , 0.371190634 , 0.216053519 , 0.089302097 , 0.045178307  },
{ 0.083675854 , 0.018476073 , 0.004013509 , 0.000915853 , 0.000138197 , 2.87e-05  },
{ 0.412673796 , 0.109557862 , 0.03344452 , 0.011531431 , 0.003318442 , 0.001233641 },
{ 0.587326204 , 0.187608998 , 0.064904927 , 0.024960971 , 0.006426297 , 0.002166833  },
{ 0.954593616 , 0.695641022 , 0.370125145 , 0.20643389 , 0.074773964 , 0.033869165 },
{ 0.045406384 , 0.007192118 , 0.000686448 , 8.19e-05 , 9.43e-06 , 1.52e-06}};

typedef struct f4_struct{
	uint16_t given_f4[NUM_ELEMENTS_BRACKET];
	// TODO: do I want to do this or not?
	//uint16_t f4_picks[NUM_BRACKETS][NUM_ELEMENTS_BRACKET];
	uint16_t unique_south_teams[NUM_TEAMS_REGION + 1];
	uint16_t unique_east_teams[NUM_TEAMS_REGION + 1];
	uint16_t unique_midwest_teams[NUM_TEAMS_REGION + 1];
	uint16_t unique_west_teams[NUM_TEAMS_REGION + 1];
	uint16_t num_south_teams;
	uint16_t num_east_teams;
	uint16_t num_midwest_teams;
	uint16_t num_west_teams;
	uint16_t south_tracker;
	uint16_t east_tracker;
	uint16_t midwest_tracker;
	uint16_t west_tracker;
	uint16_t num_scenarios;
	uint16_t num_scenarios_calculated;
	uint16_t scenario_tracker; // 0 if s winner, midwest runner-up, 1 if s winner w runner-up, 2 if e winner mw runner-up, 3 if e winner w runner-up, 4 if mw winner s runner up, etc.
	double prob_scenario;
	double unpicked_probs[4][CHAMP_INDEX+1];
	double winner_probs[NUM_BRACKETS+1];
} f4_struct;

typedef struct test_generator{
	uint16_t test_f4[NUM_ELEMENTS_BRACKET];
	uint16_t test_south_teams[NUM_TEAMS_REGION + 1];
	uint16_t test_east_teams[NUM_TEAMS_REGION + 1];
	uint16_t test_midwest_teams[NUM_TEAMS_REGION + 1];
	uint16_t test_west_teams[NUM_TEAMS_REGION + 1];
	uint16_t num_south_teams;
	uint16_t num_east_teams;
	uint16_t num_midwest_teams;
	uint16_t num_west_teams;
	uint16_t south_tracker;
	uint16_t east_tracker;
	uint16_t midwest_tracker;
	uint16_t west_tracker;
	uint16_t num_scenarios;
	uint16_t num_scenarios_calculated;
	uint16_t scenario_tracker; // 0 if s winner, midwest runner-up, 1 if s winner w runner-up, 2 if e winner mw runner-up, 3 if e winner w runner-up, 4 if mw winner s runner up, etc.
} test_generator;

uint16_t find_winner_scenario(uint16_t given_f4[NUM_ELEMENTS_BRACKET], uint16_t f4s_list[NUM_BRACKETS][NUM_ELEMENTS_BRACKET], uint16_t winners[NUM_BRACKETS]);
float find_best_f4(uint16_t f4_picks[NUM_BRACKETS][NUM_ELEMENTS_BRACKET]);
void find_unique_elements(uint16_t f4_picks[NUM_BRACKETS][NUM_ELEMENTS_BRACKET], f4_struct *f4);
void init_f4_struct(f4_struct *f4);
void generate_unpicked_probs(f4_struct * f4);
uint16_t generate_f4_scenario(f4_struct * f4);
void calculate_prob_scenario(double full_probs[NUM_TEAMS+4][NUM_ROUNDS], f4_struct *f4);
void calculate_full_probs(double full_probs[NUM_TEAMS+4][NUM_ROUNDS], f4_struct *f4);
void find_test_teams(uint16_t f4_picks[NUM_BRACKETS][NUM_ELEMENTS_BRACKET], test_generator* test_gen);
void init_test_gen(test_generator * test_gen);
uint16_t generate_test_scenario(test_generator * test_gen);


